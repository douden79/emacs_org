* Theme
** monokai-theme
#+begin_src emacs-lisp
(use-package monokai-theme
:ensure t
:config
(setq monokai-use-variable-pitch nil))
#+end_src
** darkokai-theme
#+begin_src emacs-lisp
(use-package darkokai-theme
:ensure t
:config (load-theme 'darkokai t)
(setq darkokai-mode-line-padding 1))
#+end_src

* General
** Editor
*** clipboard
*** hlinum
#+begin_src emacs-lisp
(use-package hlinum
:ensure t
:config
(global-linum-mode t)
(defun linum-update-window-scale-fix (win)
"fix linum for scaled text"
(set-window-margins win
(ceiling (* (if (boundp 'text-scale-mode-step)
(expt text-scale-mode-step
text-scale-mode-amount) 1)
(if (car (window-margins))
(car (window-margins)) 1)))))
(advice-add #'linum-update-window :after #'linum-update-window-scale-fix))
#+end_src
** linum
#+begin_src emacs-lisp
(use-package linum
:ensure t
:config
(global-hl-line-mode +1)
(setq linum-format "%-4d"))
(column-number-mode t)
(size-indication-mode t)
#+end_src
** cursor
#+begin_src emacs-lisp
(set-cursor-color "SkyBlue2")
#+end_src
** highlight-symbol
#+begin_src emacs-lisp
(use-package highlight-symbol
:ensure t
:config
(global-set-key (kbd "<f3>") 'highlight-symbol-at-point)
(global-set-key (kbd "<f4>") 'highlight-symbol-remove-all))
#+end_src
** editor
*** smex
#+begin_src emacs-lisp
(use-package smex
:if (not (featurep 'helm-mode))
:ensure t
:bind ("M-x" . smex))
#+end_src
*** sublimity
#+begin_src emacs-lisp
(use-package sublimity
:ensure t
:config
(setq sumlimity-scroll-weight 2
sublimity-scroll-drift-length 2)
(setq sublimity-attractive-centering-width 110))
#+end_src
*** autocomplete
#+begin_src emacs-lisp
(use-package auto-complete
:ensure t
:init (ac-config-default)
(global-auto-complete-mode t))
#+end_src
*** yasnippet
#+begin_src emacs-lisp
(use-package yasnippet
:ensure t
:defer t
:diminish yas-minor-mode
:config (setq yas-snippet-dirs (concat user-emacs-directory "snippets"))
(yas-global-mode)
(add-hook 'term-mode-hook (lambda() setq yas-dont-activate t)))
#+end_src
    
*** Multiple cursors
#+begin_src emacs-lisp
(use-package multiple-cursors
:ensure t
:bind (("C-l" . mc/edit-lines)
("C-;" . mc/mark-all-words-like-this)))
#+end_src
*** function-args
#+begin_src emacs-lisp
(use-package function-args
:ensure t
:config (fa-config-default)
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.h\\'" . c-mode))
(set-default 'semantic-case-fold t))
#+end_src
*** vlf
#+begin_src emacs-lisp
(use-package vlf
:ensure t
:config (custom-set-variables '(vlf-application 'dont-ask)))
#+end_src
*** dokuwiki
#+begin_src emacs-lisp
(use-package dokuwiki-mode
:ensure t)
#+end_src
*** bm
Description:

  This package was created because I missed the bookmarks from M$
  Visual Studio. I find that they provide an easy way to navigate
  in a buffer.

  bm.el provides visible, buffer local, bookmarks and the ability
  to jump forward and backward to the next bookmark.
#+begin_src emacs-lisp
(use-package bm
:ensure t
:bind (("C-1" . bm-toggle)
("C-2" . bm-next)
("C-3" . bm-previous)))
#+end_src

*** tabbar
#+begin_src emacs-lisp
(use-package tabbar
:ensure t)
#+end_src
** directory
*** dired
#+begin_src emacs-lisp
(setq dired-dwim-target t)
#+end_src
** Ide
#+begin_src emacs-lisp
(use-package ecb
:ensure t)
:init (setq ecb-layout-name "top1")
(setq ecb-examples-bufferinfo-buffer-name nil)
(setq stack-trace-on-error t)
(setq ecb-version-check nil)
(setq ecb-compile-window-height 12)
#+end_src
* org-mode
** org-bullets
#+begin_src emacs-lisp
(use-package org-bullets
:ensure t
:init (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src
* Scm
** magit
#+begin_src emacs-lisp
(use-package magit
:ensure t
:bind	(("C-c l" . magit-log-all)
	("C-x c" . magit-commit)
	("C-x p" . magit-pull)))
#+end_src
* Helm
*** helm-gtags
#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :init (progn
          (require 'helm-config)
          (setq helm-yank-symbol-first t
                helm-idle-delay 0.0
                helm-input-idle-delay 0.01
                helm-quick-update t
                helm-M-x-requires-pattern nil
                helm-ff-skip-boring-files t))
:bind (("C-x b" . helm-mini)
         ("C-f" . helm-semantic-or-imenu)
         ("C-x 8 <RET>" . helm-ucs)
         ("C-<f1>" . helm-apropos)))

(use-package helm-buffers
  :ensure helm
  :commands helm-buffers-list
  :config (setq helm-buffers-fuzzy-matching t))

(use-package helm-elisp
  :bind ("C-h a" . helm-apropos))

(use-package helm-git-grep
  :ensure t
  :commands helm-git-grep
  :config (setq helm-git-grep-candidate-number-limit nil))

(use-package helm-gtags
  :ensure t
  :commands (helm-gtags-mode helm-gtags-dwim)
  :diminish "HGt"
  :bind	(("M-t" . helm-gtags-pop-stack)
	("M-]" . helm-gtags-find-tags)
	("M-[" . helm-gtags-find-rtags)
	("M-." . helm-gtags-dwim)
	("M-," . helm-gtags-tags-in-this-function)
	("C-j" . helm-gtags-select)
	("M-g M-p" . helm-gtags-parse-file)))

;; Enable helm-gtags-mode in code
(add-hook 'c-mode-hook 'helm-gtags-mode)
(add-hook 'c++-mode-hook 'helm-gtags-mode)
(add-hook 'asm-mode-hook 'helm-gtags-mode)

(use-package helm-swoop
  :ensure t
  :bind (("C-c o" . helm-swoop)
         ("C-c O" . helm-multi-swoop)))

(use-package helm-descbinds
  :ensure t
  :bind (("C-h b" . helm-descbinds)
         ("C-h h" . helm-descbinds)))
#+end_src
*** helm-projectile
#+begin_src emacs-lisp
(use-package helm-projectile
:ensure t
:config (helm-projectile-on))
(setq projectile-enable-caching t)
(setq projectile-switch-project-action 'projectile-dired)
(setq projectile-remember-window-configs t)
(setq projectile-completion-system 'helm)
(setq projectile-switch-project-action 'helm-projectile)
#+end_src
* Default
** GUI
*** beacon
#+begin_src emacs-lisp
(use-package beacon
:ensure t
:init (beacon-mode 1))
#+end_src
*** font and language
#+begin_src emacs-lisp
(set-fontset-font "fontset-default" '(#x1100 . #xffdc)
                   '("Gulim" . "iso10646-1"))
(set-fontset-font "fontset-default" '(#xe0bc . #xf66e)
                   '("Gulim" . "iso10646-1"))

(setq face-font-rescale-alist
       '((".*hiragino.*" . 1.0)
	 (".*Gulim.*" . 1.0)))
(set-language-environment "Korean")
#+end_src
*** first init config
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
(modify-coding-system-alist 'file "\\.*\\'" 'utf-8)
(setq coding-system-for-read 'utf-8)
(setq-default
 whitespace-line-column 80
 whitespace-style       '(face lines-tail))
#+end_src
*** syntax
#+begin_src emacs-lisp
(use-package c-eldoc
:ensure t
:config (add-hook 'c-mode-hook 'c-turn-on-eldoc-mode))
(defun linux-c-indent ()
  "adjusted defaults for C/C++ mode use with the Linux kernel."
  (interactive)
  (setq tab-width 8)
  ;;force spaces, to work with dumber editors
  (setq indent-tabs-mode nil) 
  (setq c-basic-offset 8))

(add-hook 'c-mode-hook 'linux-c-indent)
(add-hook 'c-mode-hook (lambda() (c-set-style "K&R")))
(add-hook 'c++-mode-hook 'linux-c-indent)

(global-semantic-idle-scheduler-mode t)
(global-semanticdb-minor-mode t)
(global-semantic-idle-summary-mode t)
(global-semantic-idle-completions-mode t)
(global-semantic-highlight-func-mode t)
(global-semantic-decoration-mode t)
(global-semantic-stickyfunc-mode t)
(global-semantic-mru-bookmark-mode t)
(setq-default semantic-symref-tool "global")

(semanticdb-enable-gnu-global-databases 'c++-mode)
(semanticdb-enable-gnu-global-databases 'c-mode)
#+end_src
*** highlight parense
#+begin_src emacs-lisp
(setq show-paren-delay 0)
(show-paren-mode t)
(setq show-paren-style 'expression)
(set-face-background 'show-paren-match-face "#ffffff")
(set-face-foreground 'show-paren-match-face "#36648b")
(set-face-attribute 'show-paren-match-face nil
:weight 'bold :underline nil :overline nil :slant 'normal)
#+end_src
*** flycheck
#+begin_src emacs-lisp
(use-package flycheck
:ensure t
:init (global-flycheck-mode))
#+end_src
